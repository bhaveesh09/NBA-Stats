{"ast":null,"code":"const playerListReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"ADD_PLAYER\":\n      return [...state, {\n        uuid: action.payload.uuid,\n        id: action.payload.id,\n        first_name: action.payload.first_name,\n        last_name: action.payload.last_name,\n        team: action.payload.team.abbreviation,\n        stats: action.payload.stats,\n        season: action.payload.season\n      }];\n    case \"REMOVE_PLAYER\":\n      return state.filter(player => player.uuid !== action.payload);\n    case \"UPDATE_STATS\":\n      let newState = [...state];\n      newState.forEach(player => {\n        if (player.uuid === action.payload.uuid) {\n          let newPlayer = {\n            ...player\n          };\n          newPlayer.stats = action.payload.stats;\n          newPlayer.season = action.payload.season;\n          return [...newState, newPlayer];\n        }\n        return [...newState];\n      });\n      return newState;\n    case \"SORT_BY_STAT\":\n      let sortedPlayerList = [...state];\n      if (action.payload.ascending) {\n        sortedPlayerList.sort((a, b) => {\n          return a.stats.data[0][action.payload.stat] - b.stats.data[0][action.payload.stat];\n        });\n      }\n      if (!action.payload.ascending) {\n        sortedPlayerList.sort((a, b) => {\n          return b.stats.data[0][action.payload.stat] - a.stats.data[0][action.payload.stat];\n        });\n      }\n      return sortedPlayerList;\n    default:\n      return state;\n  }\n};\nexport default playerListReducer;","map":{"version":3,"names":["playerListReducer","state","arguments","length","undefined","action","type","uuid","payload","id","first_name","last_name","team","abbreviation","stats","season","filter","player","newState","forEach","newPlayer","sortedPlayerList","ascending","sort","a","b","data","stat"],"sources":["/Users/bhaveesh/Desktop/NBA-stats/NBA-Stats/src/state/reducers/playerListReducer.js"],"sourcesContent":["const playerListReducer = (state = [], action) => {\n    switch (action.type) {\n      case \"ADD_PLAYER\":\n        return [\n          ...state,\n          {\n            uuid: action.payload.uuid,\n            id: action.payload.id,\n            first_name: action.payload.first_name,\n            last_name: action.payload.last_name,\n            team: action.payload.team.abbreviation,\n            stats: action.payload.stats,\n            season: action.payload.season,\n          },\n        ];\n      case \"REMOVE_PLAYER\":\n        return state.filter((player) => player.uuid !== action.payload);\n      case \"UPDATE_STATS\":\n        let newState = [...state];\n        newState.forEach((player) => {\n          if (player.uuid === action.payload.uuid) {\n            let newPlayer = { ...player };\n            newPlayer.stats = action.payload.stats;\n            newPlayer.season = action.payload.season;\n            return [...newState, newPlayer];\n          }\n          return [...newState];\n        });\n        return newState;\n      case \"SORT_BY_STAT\":\n        let sortedPlayerList = [...state];\n        if (action.payload.ascending) {\n          sortedPlayerList.sort((a, b) => {\n            return (\n              a.stats.data[0][action.payload.stat] -\n              b.stats.data[0][action.payload.stat]\n            );\n          });\n        }\n        if (!action.payload.ascending) {\n          sortedPlayerList.sort((a, b) => {\n            return (\n              b.stats.data[0][action.payload.stat] -\n              a.stats.data[0][action.payload.stat]\n            );\n          });\n        }\n        return sortedPlayerList;\n      default:\n        return state;\n    }\n  };\n  \n  export default playerListReducer;"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,SAAAA,CAAA,EAAwB;EAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzC,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,YAAY;MACf,OAAO,CACL,GAAGL,KAAK,EACR;QACEM,IAAI,EAAEF,MAAM,CAACG,OAAO,CAACD,IAAI;QACzBE,EAAE,EAAEJ,MAAM,CAACG,OAAO,CAACC,EAAE;QACrBC,UAAU,EAAEL,MAAM,CAACG,OAAO,CAACE,UAAU;QACrCC,SAAS,EAAEN,MAAM,CAACG,OAAO,CAACG,SAAS;QACnCC,IAAI,EAAEP,MAAM,CAACG,OAAO,CAACI,IAAI,CAACC,YAAY;QACtCC,KAAK,EAAET,MAAM,CAACG,OAAO,CAACM,KAAK;QAC3BC,MAAM,EAAEV,MAAM,CAACG,OAAO,CAACO;MACzB,CAAC,CACF;IACH,KAAK,eAAe;MAClB,OAAOd,KAAK,CAACe,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACV,IAAI,KAAKF,MAAM,CAACG,OAAO,CAAC;IACjE,KAAK,cAAc;MACjB,IAAIU,QAAQ,GAAG,CAAC,GAAGjB,KAAK,CAAC;MACzBiB,QAAQ,CAACC,OAAO,CAAEF,MAAM,IAAK;QAC3B,IAAIA,MAAM,CAACV,IAAI,KAAKF,MAAM,CAACG,OAAO,CAACD,IAAI,EAAE;UACvC,IAAIa,SAAS,GAAG;YAAE,GAAGH;UAAO,CAAC;UAC7BG,SAAS,CAACN,KAAK,GAAGT,MAAM,CAACG,OAAO,CAACM,KAAK;UACtCM,SAAS,CAACL,MAAM,GAAGV,MAAM,CAACG,OAAO,CAACO,MAAM;UACxC,OAAO,CAAC,GAAGG,QAAQ,EAAEE,SAAS,CAAC;QACjC;QACA,OAAO,CAAC,GAAGF,QAAQ,CAAC;MACtB,CAAC,CAAC;MACF,OAAOA,QAAQ;IACjB,KAAK,cAAc;MACjB,IAAIG,gBAAgB,GAAG,CAAC,GAAGpB,KAAK,CAAC;MACjC,IAAII,MAAM,CAACG,OAAO,CAACc,SAAS,EAAE;QAC5BD,gBAAgB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC9B,OACED,CAAC,CAACV,KAAK,CAACY,IAAI,CAAC,CAAC,CAAC,CAACrB,MAAM,CAACG,OAAO,CAACmB,IAAI,CAAC,GACpCF,CAAC,CAACX,KAAK,CAACY,IAAI,CAAC,CAAC,CAAC,CAACrB,MAAM,CAACG,OAAO,CAACmB,IAAI,CAAC;QAExC,CAAC,CAAC;MACJ;MACA,IAAI,CAACtB,MAAM,CAACG,OAAO,CAACc,SAAS,EAAE;QAC7BD,gBAAgB,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC9B,OACEA,CAAC,CAACX,KAAK,CAACY,IAAI,CAAC,CAAC,CAAC,CAACrB,MAAM,CAACG,OAAO,CAACmB,IAAI,CAAC,GACpCH,CAAC,CAACV,KAAK,CAACY,IAAI,CAAC,CAAC,CAAC,CAACrB,MAAM,CAACG,OAAO,CAACmB,IAAI,CAAC;QAExC,CAAC,CAAC;MACJ;MACA,OAAON,gBAAgB;IACzB;MACE,OAAOpB,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}